// Author: Gaurav Poudel
// License: The Unlicense
// Language: PowerFX
// Store me in the formula section of power apps. Use component "Map", with Parent.Width & Parent.Height, then import to container in Power Apps Canvas.
// All code provided as is, released without any responsibility into the public domain without ownership.
//
// Here I import 2 databases, Accounts and Contacts. They are easy because the Latitude & Longitude are already provided. Use BingMaps API and power automate to auto-populate based on text.
// Create collections to cache base data - for some reason the map only works when I provide the element structure in this table ;)

EmptyTable = Table(
    {
        'Longitude': 0,
        'Latitude': 0,
        'Name': "...",
        'Phone Number': "...",
        'Color': "Blue",
        'Icon': "pin-round"
    }
);

ThemeBasedColor = Switch(
    MapMode.Selected.Value,
    "Light",
    RGBA(
        245,
        245,
        245,
        1
    ),
    "Regular",
    RGBA(
        121,
        158,
        182,
        1
    ),
    "Regular Shaded",
    RGBA(
        121,
        158,
        182,
        1
    ),
    "Satellite",
    RGBA(
        79,
        100,
        100,
        1
    ),// Light green

    "Satellite (Unlabeled)",
    RGBA(
        79,
        100,
        100,
        1
    ),// Light green

    "Dark",
    RGBA(
        64,
        64,
        64,
        1
    ),// Dark grey

    "Night",
    RGBA(
        32,
        32,
        32,
        1
    ),// Darker grey

    "High Contrast Light",
    RGBA(
        255,
        255,
        255,
        1
    ),// White

    "High Contrast Dark",
    RGBA(
        0,
        0,
        0,
        1
    ),// Black

    RGBA(
        245,
        245,
        245,
        1
    )// Default color

);

MapTable = RenameColumns(
    ShowColumns(
        AddColumns(
            AddColumns(
                Table(
                    // Read Dataverse Tables

                    AddColumns(
                        ShowColumns(
                            colAccounts,
                            'Account Name',
                            'Address 1: Street 1',
                            'Main Phone',
                            'Address 1: Latitude',
                            'Address 1: Longitude'
                        ),
                        source,
                        "Accounts"
                    ),
                    AddColumns(
                        ShowColumns(
                            colLocations,
                            Name,
                            'Address Text',
                            'Phone Number',
                            'Position Latitude',
                            'Position Longitude'
                        ),
                        source,
                        "Accounts"
                    ),
                    AddColumns(
                        ShowColumns(
                            colContacts,
                            'Full Name',
                            'Street 1',
                            'Mobile phone',
                            'Contact type',
                            'Address 1: Latitude',
                            'Address 1: Longitude'
                        ),
                        source,
                        "Contacts"
                    )
                ),
                // Merge Data Values

                CombinedName,
                Coalesce(
                    name,
                    fullname
                ),
                CombinedAddress,
                Coalesce(
                    addresstext,
                    address1_line1
                ),
                CombinedPhone,
                Coalesce(
                    phonenumber,
                    mobilephone
                ),
                ContactType,
                Text(contacttype),
                mycolor,
                Switch(
                    source,
                    "Accounts",
                    "green",
                    "Contacts",
                    Switch(
                        Text(contacttype),
                        "Client",
                        "red",// Client type

                        "Staff",
                        "red",// Staff type

                        "black"
                    )
                ),
                myicon,
                Switch(
                    source,
                    "Accounts",
                    "marker",
                    "Contacts",
                    Switch(
                        Text(contacttype),
                        "Client",
                        "pin-round",
                        "Staff",
                        "pin-round",
                        "pin-round"
                    )
                )
            ),
            CombinedLatitude,
            Coalesce(
                address1_latitude,
                msemr_locationpositionlatitude,
                address1_latitude,
                If(
                    !IsBlank(CombinedAddress),
                    0, // BingMaps.GetLocationByAddress({addressLine: CombinedAddress}).point.coordinates.latitude, // fallback - disabled for speed
                    Blank()
                )
            ),
            CombinedLongitude,
            Coalesce(
                address1_longitude,
                msemr_locationpositionlongitude,
                address1_longitude,
                If(
                    !IsBlank(CombinedAddress),
                    0, // BingMaps.GetLocationByAddress({addressLine: CombinedAddress}).point.coordinates.longitude, // fallback - disabled for speed
                    Blank()
                )
            )
        ),
        // Filter Columns to Display

        CombinedName,
        CombinedAddress,
        CombinedPhone,
        CombinedLongitude,
        CombinedLatitude,
        source,
        mycolor,
        myicon,
        ContactType
    ),
    // Rename Column Names

    CombinedName,
    'Name',
    CombinedAddress,
    'Address',
    CombinedPhone,
    'Phone Number',
    CombinedLatitude,
    'Latitude',
    CombinedLongitude,
    'Longitude',
    source,
    'Source',
    mycolor,
    'Color',
    myicon,
    'Icon'
);

// Start Parsing GEOJSON Values

geoJSON = ParseJSON(MapComponentMain.SelectedShape.GeoJSON);
polyGeoJSON = (First(ParseJSON(MapComponentMain.SelectedShape.GeoJSON).geometry.coordinates));

ShapeInfo = With(
    {geoJSON: geoJSON},
    {
        shapeType: Text(geoJSON.properties.subType),
        geometry: geoJSON.geometry.coordinates,
        radius: Value(geoJSON.properties.radius)
    }
);

// Function to calculate distance between two points using Haversine formula

CalculateDistance(
    lon1: Number,
    lat1: Number,
    lon2: Number,
    lat2: Number
):Number = With(
    {
        R: 6371000,
        // Earth's radius in meters

        φ1: Radians(lat1),
        φ2: Radians(lat2),
        Δφ: Radians(lat2 - lat1),
        Δλ: Radians(lon2 - lon1)
    },
    2 * R * Asin(Sqrt(Sin(Δφ / 2) * Sin(Δφ / 2) + Cos(φ1) * Cos(φ2) * Sin(Δλ / 2) * Sin(Δλ / 2)))
);
// Point in Circle check

PointInCircle(
    pointLon: Number,
    pointLat: Number,
    centerLon: Number,
    centerLat: Number,
    radiusMeters: Number
): Boolean = If(
    And(
        IsNumeric(pointLon),
        IsNumeric(pointLat)
    ),
    CalculateDistance(
        pointLon,
        pointLat,
        centerLon,
        centerLat
    ) <= radiusMeters,
    false
);

// Point in Polygon check

PointInPolygon(longitude:Number,latitude:Number,polygon:UntypedObject):Boolean = If(
    IsNumeric(longitude) && IsNumeric(latitude),
    With(
        {num_vertices: CountRows(polygon)},
        With(
            {
                Result: CountIf(
                    Sequence(num_vertices),
                    With(
                        {
                            i: Value,
                            j: Mod(
                                Value,
                                num_vertices
                            ) + 1,
                            vertI: Index(
                                polygon,
                                Value
                            ),
                            vertJ: Index(
                                polygon,
                                Mod(
                                    Value,
                                    num_vertices
                                ) + 1
                            )
                        },
                        And(
                                // Check if point is within longitude bounds of edge

                            Or(
                                And(
                                    vertI.Longitude <= longitude,
                                    longitude < vertJ.Longitude
                                ),
                                And(
                                    vertJ.Longitude <= longitude,
                                    longitude < vertI.Longitude
                                )
                            ),
                                // Calculate intersection point with vertical ray

                            latitude > (vertJ.Latitude - vertI.Latitude) * (longitude - vertI.Longitude) / (vertJ.Longitude - vertI.Longitude) + vertI.Latitude
                        )
                    )
                )
            },
            Mod(
                Result,
                2
            ) = 1// If odd number of intersections, point is inside

        )
    ),
    false
);

// Parse GeoJSON based on shape type

ParseGeoJson = Switch(
    ShapeInfo.shapeType,
    "Circle",
    // For circles, create a single-point table with the center coordinates

    Table(
        {
            Point: 1,
            RawCoordinate: JSON(ShapeInfo.geometry),
            Latitude: Last(ShapeInfo.geometry),
            Longitude: First(ShapeInfo.geometry),
            Radius: ShapeInfo.radius// Add radius for circle calculations

        }
    ),
    // For polygons and rectangles, use the original parsing logic

    With(
        {coords: polyGeoJSON},
        Table(
            ForAll(
                Sequence(CountRows(coords)),
                {
                    Point: Value,
                    RawCoordinate: JSON(
                        Index(
                            coords,
                            Value
                        )
                    ),
                    Latitude: Last(
                        Index(
                            coords,
                            Value
                        )
                    ),
                    Longitude: First(
                        Index(
                            coords,
                            Value
                        )
                    )
                }
            )
        )
    )
);

// Modified table filtering based on shape type

SelectedTable = Filter(
    AddColumns(
        MapTable,
        'Result',
        With(
            {
                pointLong: Value(Longitude),
                pointLat: Value(Latitude)
            },
            Switch(
                ShapeInfo.shapeType,
                "Circle",
                If(
                    And(
                        !IsBlank(pointLong),
                        !IsBlank(pointLat)
                    ),
                    PointInCircle(
                        pointLong,
                        pointLat,
                        Value(First(ParseJSON(JSON(ShapeInfo.geometry)))),
                        Value(Last(ParseJSON(JSON(ShapeInfo.geometry)))),
                        Value(ShapeInfo.radius)
                    ),
                    false
                ),
                // Default case handles Polygon, Rectangle

                If(
                    And(
                        !IsBlank(pointLong),
                        !IsBlank(pointLat)
                    ),
                    PointInPolygon(
                        pointLong,
                        pointLat,
                        ParseJSON(JSON(ParseGeoJson))
                    ),
                    false
                )
            )
        )
    ),
    Result = true
);

// Finally its working, lets combine output so we can access the data as Selected.Clients or All.Accounts

Selected = {
    Clients: Filter(
        SelectedTable,
        ContactType = "Client"
    ),
    Accounts: Filter(
        SelectedTable,
        Source = "Accounts"
    )
};

All = {
    Clients: Filter(
        MapTable,
        ContactType = "Client"
    ),
    Accounts: Filter(
        MapTable,
        Source = "Accounts"
    )
};
